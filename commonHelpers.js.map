{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet timerInterval = null;\nlet selectedEndTime = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedEndTime = selectedDates[0];\n    if (selectedEndTime <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nconst updateTimer = () => {\n  const now = new Date();\n  const timeLeft = selectedEndTime - now;\n\n  if (timeLeft <= 0) {\n    clearInterval(timerInterval);\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeLeft);\n\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n};\n\nconst startTimer = () => {\n  timerInterval = setInterval(updateTimer, 1000);\n};\n\nstartButton.addEventListener('click', () => {\n  if (timerInterval) {\n    clearInterval(timerInterval);\n  }\n  updateTimer();\n  startTimer();\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n});\n\nstartButton.disabled = true;\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datetimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","timerInterval","selectedEndTime","options","selectedDates","updateTimer","timeLeft","days","hours","minutes","seconds","convertMs","addLeadingZero","startTimer","value","ms"],"mappings":"oDAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAgB,KAChBC,EAAkB,KAEtB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAkBE,EAAc,CAAC,EAC7BF,GAAmB,IAAI,MACzB,SAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDN,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEA,UAAUD,EAAgBQ,CAAO,EAEjC,MAAME,EAAc,IAAM,CAExB,MAAMC,EAAWJ,EADL,IAAI,KAGhB,GAAII,GAAY,EAAG,CACjB,cAAcL,CAAa,EAC3B,MACD,CAED,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAQ,EAE5DT,EAAS,YAAce,EAAeL,CAAI,EAC1CT,EAAU,YAAcc,EAAeJ,CAAK,EAC5CT,EAAY,YAAca,EAAeH,CAAO,EAChDT,EAAY,YAAcY,EAAeF,CAAO,CAClD,EAEMG,EAAa,IAAM,CACvBZ,EAAgB,YAAYI,EAAa,GAAI,CAC/C,EAEAT,EAAY,iBAAiB,QAAS,IAAM,CACtCK,GACF,cAAcA,CAAa,EAE7BI,IACAQ,IACAjB,EAAY,SAAW,GACvBD,EAAe,SAAW,EAC5B,CAAC,EAEDC,EAAY,SAAW,GAEvB,MAAMgB,EAAiBE,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAE7D,SAASH,EAAUI,EAAI,CAMrB,MAAMR,EAAO,KAAK,MAAMQ,EAAK,KAAG,EAC1BP,EAAQ,KAAK,MAAOO,EAAK,MAAO,IAAI,EACpCN,EAAU,KAAK,MAAQM,EAAK,MAAO,KAAQ,GAAM,EACjDL,EAAU,KAAK,MAASK,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}